
package dbms_assign2;


import static dbms_assign2.DrivingClass.con;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


public class UPI extends javax.swing.JFrame {
    browse br;
    String[] vpaAddresses =  new String[2];
    String[] upiHandles = {"BARODAMPAY","rbl","upi","allbank","okhdfcbank", "okaxis" , "oksbi", "okicici","icici","ybl"};
    String emailID;
    boolean isUPIHandle = false;
    boolean validPhoneNumber = false;
    String Amount;
    
    public UPI(String emailID, String Amount, browse br) {
        this.br = br;
        this.emailID = emailID;
        this.Amount = Amount;
        initComponents();
        amount.setText(Amount);
        amount.setFont(new java.awt.Font("Tahoma", 1, 11));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("tt.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        vpaAddress = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        disp = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tressure Oak");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("UPI PAYMENT MODE ");

        jLabel2.setText("ENTER VPA :");

        vpaAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vpaAddressActionPerformed(evt);
            }
        });

        jButton1.setText("VARIFY AND PAY");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<-- BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        disp.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        disp.setText("Payable Amount :");

        amount.setPreferredSize(new java.awt.Dimension(10, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 24, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(168, 168, 168))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(vpaAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(disp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(disp)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vpaAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int okButton;
        int i = 0;
        int atCount = 0;
        String vpa = vpaAddress.getText();
        vpaAddresses =vpa.split("@");
       boolean  isAtPresent = false;
        if(vpa != null){
            
        for(i = 0 ; i < vpa.length();i++){
            if(vpa.charAt(i) == '@'){
                atCount++;
                isAtPresent = true;
            }
           
        }
        if(atCount != 1)
            isAtPresent = false;
        
        if(!isAtPresent){
            vpaAddress.setText(null);
            JOptionPane.showMessageDialog(null,"Please Enter a Valid VPA Address", "Invalid VPA Address", JOptionPane.INFORMATION_MESSAGE);
        }else{
            try{
            for(String x : upiHandles){
                
                if(x.equals(vpaAddresses[1])){
                    this.isUPIHandle = true;
                    break;
                }
                
            }
            
            }catch(Exception e){
                
                JOptionPane.showMessageDialog(null,"Please Enter a Valid VPA Address", "Invalid VPA Address", JOptionPane.INFORMATION_MESSAGE);

            }
            
          this.validPhoneNumber = DrivingClass.validatePhoneNumber(vpaAddresses[0]);
            
            if(this.validPhoneNumber && this.isUPIHandle){
                
                
             okButton = JOptionPane.showConfirmDialog(null,"Payment Successfull, your Order on the Way!", "Success",JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
             if(JOptionPane.OK_OPTION == okButton || JOptionPane.CANCEL_OPTION == okButton){
                 
                 dispose();
                 
                 try {
                     updateOrderData(this.emailID);
                   
                     br.dispose();
                     
                  
                    
                     new browse(this.emailID).setVisible(rootPaneCheckingEnabled);

                 } catch (SQLException ex) {
                     Logger.getLogger(UPI.class.getName()).log(Level.SEVERE, null, ex);
                 }
 
             }
            }else{
                
                    JOptionPane.showMessageDialog(null,"Please Enter a Valid VPA Address", "Invalid VPA Address", JOptionPane.INFORMATION_MESSAGE);

                
            }
            
            
            
            
            
            
        }
        
        }else{
            if(!isAtPresent)
                JOptionPane.showMessageDialog(null,"Please Enter a Valid VPA Address", "Invalid VPA Address", JOptionPane.INFORMATION_MESSAGE);
        }
        
        
        this.vpaAddresses = vpaAddress.getText().split("@");
        
        
       // JOptionPane.showMessageDialog(null,"open your upi application and pay", "UPI Payment", JOptionPane.INFORMATION_MESSAGE);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void vpaAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vpaAddressActionPerformed
        
        
        
        
        
    }//GEN-LAST:event_vpaAddressActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        try {
            new CheckOut(this.emailID, br);
            setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(UPI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amount;
    private javax.swing.JLabel disp;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField vpaAddress;
    // End of variables declaration//GEN-END:variables

    private void updateOrderData(String emailID) throws SQLException {

        int totalOrders = 0;
        int update = -1;
        con = DriverManager.getConnection("jdbc:mysql://localhost:3306/tt?autoReconnect=true&useSSL=false","root","toor");

        
        PreparedStatement st =con.prepareCall("SELECT count(order_id) FROM orders");
        
        ResultSet rt = st.executeQuery();
        while(rt.next()){
            
        totalOrders = Integer.parseInt(rt.getString(1));
        
        
    }
        
        st = con.prepareCall("SELECT * FROM cart WHERE emailID = ?");
        st.setString(1, this.emailID);
        rt = st.executeQuery();
        
        Connection localCon = con;
        ResultSet localRt;
        PreparedStatement localSt;
        while(rt.next()){
            
            localSt = localCon.prepareCall("INSERT INTO userorder (emailID, furniture_id, purchased_time) VALUES (?, ?, ?)");
            localSt.setString(1, rt.getString(1));
            localSt.setString(2, rt.getString(2));
            Timestamp ts=new Timestamp(new Date().getTime());  
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
            localSt.setString(3,formatter.format(ts));
            localSt.executeUpdate();
        }
     st = con.prepareCall("DELETE FROM cart WHERE emailID = ?");
     st.setString(1, this.emailID);
     st.executeUpdate();
            
            localSt = localCon.prepareCall("INSERT INTO orders (order_id, email_addr, delivery_addr, total_price_purchased, date_purchased) VALUES (?, ?, ?, ?, ?)");
            localSt.setString(1, Integer.toString(totalOrders + 1));
            localSt.setString(2, this.emailID);
            localSt.setString(3, CheckOut.customerAddress);
            localSt.setString(4, this.Amount);
            Timestamp ts=new Timestamp(new Date().getTime());  
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
            localSt.setString(5,formatter.format(ts));
            
         localSt.executeUpdate();
        
        
}

}